{
  "swagger": "2.0",
  "info": {
    "description": "This is a sample server Petstore server.  You can find out more about Swagger at [http://swagger.io](http://swagger.io) or on [irc.freenode.net, #swagger](http://swagger.io/irc/).  For this sample, you can use the api key `special-key` to test the authorization filters.",
    "version": "0.0.11",
    "title": "DX-Services",
    "termsOfService": "http://swagger.io/terms/",
    "contact": {
      "email": "apiteam@gnosis.pm"
    },
    "license": {
      "name": "Apache 2.0",
      "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
    }
  },
  "host": "dx-services.gnosis.pm",
  "basePath": "/api/v1",
  "tags": [
    {
      "name": "markets",
      "description": "Get market info"
    },
    {
      "name": "accounts",
      "description": "Get account data"
    },
    {
      "name": "store",
      "description": "Access to Petstore orders"
    },
    {
      "name": "user",
      "description": "Operations about user",
      "externalDocs": {
        "description": "Find out more about our store",
        "url": "http://swagger.io"
      }
    }
  ],
  "schemes": [
    "http"
  ],
  "paths": {
    "/markets": {
      "get": {
        "tags": [
          "markets"
        ],
        "summary": "Returns all available markets",
        "description": "Returns an array of available markets in the DX",
        "operationId": "getMarkets",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "type": "object"
              }
            }
          }
        },
        "security": [
          {
            "api_key": []
          }
        ]
      }
    },
    "/markets/{tokenPair}/state": {
      "get": {
        "tags": [
          "markets"
        ],
        "summary": "Returns market state",
        "description": "Returns the current state of the requested market",
        "operationId": "getMarketDetails",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "tokenPair",
            "in": "path",
            "description": "A token pair string for selecting the desired market (TOKENA-TOKENB)",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "string",
              "enum": [
                "RUNNING",
                "WAITING_FOR_FUNDING"
              ]
            }
          }
        },
        "security": [
          {
            "api_key": []
          }
        ]
      }
    },
    "/markets/{tokenPair}/price": {
      "get": {
        "tags": [
          "markets"
        ],
        "summary": "Returns current market price",
        "description": "Returns the current market price",
        "operationId": "getCurrentPrice",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "tokenPair",
            "in": "path",
            "description": "A token pair string for selecting the desired market (TOKENA-TOKENB)",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/MarketPrice"
            }
          }
        },
        "security": [
          {
            "api_key": []
          }
        ]
      }
    },
    "/markets/{tokenPair}/closing-prices": {
      "get": {
        "tags": [
          "markets"
        ],
        "summary": "Returns a list of closing prices",
        "description": "Returns a list of the latest closing prices for a given market",
        "operationId": "getLastClosingPrices",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "tokenPair",
            "in": "path",
            "description": "A token pair string for selecting the desired market (TOKENA-TOKENB)",
            "required": true,
            "type": "string"
          },
          {
            "name": "count",
            "in": "query",
            "type": "integer",
            "format": "int32",
            "minimum": 1,
            "maximum": 20,
            "default": 5,
            "required": false,
            "description": "The number of markets to query from last"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "auctionIndex": {
                    "type": "integer",
                    "format": "int32"
                  },
                  "price": {
                    "$ref": "#/definitions/MarketPrice"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "api_key": []
          }
        ]
      }
    },
    "/markets/{tokenPair}/closing-prices/{auctionIndex}": {
      "get": {
        "tags": [
          "markets"
        ],
        "summary": "Returns closing price for selected auction",
        "description": "Returns a price object",
        "operationId": "getClosingPrice",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "tokenPair",
            "in": "path",
            "description": "A token pair string for selecting the desired market (TOKENA-TOKENB)",
            "required": true,
            "type": "string"
          },
          {
            "name": "auctionIndex",
            "in": "path",
            "description": "Auction index",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/MarketPrice"
            }
          }
        },
        "security": [
          {
            "api_key": []
          }
        ]
      }
    },
    "/markets/{tokenPair}/current-index": {
      "get": {
        "tags": [
          "markets"
        ],
        "summary": "Returns the current auction index",
        "description": "Returns an auction index",
        "operationId": "getAuctionIndex",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "tokenPair",
            "in": "path",
            "description": "A token pair string for selecting the desired market (TOKENA-TOKENB)",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        },
        "security": [
          {
            "api_key": []
          }
        ]
      }
    },
    "/markets/{tokenPair}/auction-start": {
      "get": {
        "tags": [
          "markets"
        ],
        "summary": "Returns the current auction start",
        "description": "Returns an auction start timestamp",
        "operationId": "getAuctionStart",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "tokenPair",
            "in": "path",
            "description": "A token pair string for selecting the desired market (TOKENA-TOKENB)",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          }
        },
        "security": [
          {
            "api_key": []
          }
        ]
      }
    },
    "/markets/{tokenPair}/is-approved-market": {
      "get": {
        "tags": [
          "markets"
        ],
        "summary": "Returns if is an approved market",
        "description": "Returns true or false depending if market is approved or not",
        "operationId": "isApprovedMarket",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "tokenPair",
            "in": "path",
            "description": "A token pair string for selecting the desired market (TOKENA-TOKENB)",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "boolean"
            }
          }
        },
        "security": [
          {
            "api_key": []
          }
        ]
      }
    },
    "/markets/{tokenPair}/extra-tokens": {
      "get": {
        "tags": [
          "markets"
        ],
        "summary": "Returns extra tokens for next auction",
        "description": "Returns the number of extra tokens for next auction",
        "operationId": "getExtraTokens",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "tokenPair",
            "in": "path",
            "description": "A token pair string for selecting the desired market (TOKENA-TOKENB)",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "number"
            }
          }
        },
        "security": [
          {
            "api_key": []
          }
        ]
      }
    },
    "/markets/{tokenPair}/sell-volume": {
      "get": {
        "tags": [
          "markets"
        ],
        "summary": "Returns sell volume for current auction",
        "description": "Returns sell volume for current auction",
        "operationId": "getSellVolume",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "tokenPair",
            "in": "path",
            "description": "A token pair string for selecting the desired market (TOKENA-TOKENB)",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "number"
            }
          }
        },
        "security": [
          {
            "api_key": []
          }
        ]
      }
    },
    "/markets/{tokenPair}/sell-volume-next": {
      "get": {
        "tags": [
          "markets"
        ],
        "summary": "Returns sell volume for next auction",
        "description": "Returns sell volume for next auction",
        "operationId": "getSellVolumeNext",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "tokenPair",
            "in": "path",
            "description": "A token pair string for selecting the desired market (TOKENA-TOKENB)",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "number"
            }
          }
        },
        "security": [
          {
            "api_key": []
          }
        ]
      }
    },
    "/markets/{tokenPair}/buy-volume": {
      "get": {
        "tags": [
          "markets"
        ],
        "summary": "Returns buy volume for current auction",
        "description": "Returns buy volume for current auction",
        "operationId": "getBuyVolume",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "tokenPair",
            "in": "path",
            "description": "A token pair string for selecting the desired market (TOKENA-TOKENB)",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "number"
            }
          }
        },
        "security": [
          {
            "api_key": []
          }
        ]
      }
    },
    "/markets/{tokenPair}/accounts/{accountAddress}/seller-balance": {
      "get": {
        "tags": [
          "markets"
        ],
        "summary": "Returns account seller balance for current auction",
        "description": "Returns account seller balance for the current auction",
        "operationId": "getSellerBalance",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "tokenPair",
            "in": "path",
            "description": "A token pair string for selecting the desired market (TOKENA-TOKENB)",
            "required": true,
            "type": "string"
          },
          {
            "name": "accountAddress",
            "in": "path",
            "description": "An ERC20 account address",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "number"
            }
          }
        },
        "security": [
          {
            "api_key": []
          }
        ]
      }
    },
    "/markets/{tokenPair}/accounts/{accountAddress}/buyer-balance": {
      "get": {
        "tags": [
          "markets"
        ],
        "summary": "Returns account buyer balance for current auction",
        "description": "Returns account buyer balance for the current auction",
        "operationId": "getBuyerBalance",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "tokenPair",
            "in": "path",
            "description": "A token pair string for selecting the desired market (TOKENA-TOKENB)",
            "required": true,
            "type": "string"
          },
          {
            "name": "accountAddress",
            "in": "path",
            "description": "An ERC20 account address",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "number"
            }
          }
        },
        "security": [
          {
            "api_key": []
          }
        ]
      }
    },
    "/account/{accountAddress}/balances": {
      "get": {
        "tags": [
          "accounts"
        ],
        "summary": "Returns the current account balances",
        "description": "Returns a full overview of account balances",
        "operationId": "getBalances",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "accountAddress",
            "in": "path",
            "description": "Account address",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object"
            }
          }
        },
        "security": [
          {
            "api_key": []
          }
        ]
      }
    },
    "/account/{accountAddress}/tokens/{tokenAddress}": {
      "get": {
        "tags": [
          "accounts"
        ],
        "summary": "Returns account balance for a token",
        "description": "Returns the account balance for a token",
        "operationId": "getTokenBalanceOf",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "accountAddress",
            "in": "path",
            "description": "Account address",
            "required": true,
            "type": "string"
          },
          {
            "name": "tokenAddress",
            "in": "path",
            "description": "ERC20 token contract address",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object"
            }
          }
        },
        "security": [
          {
            "api_key": []
          }
        ]
      }
    },
    "/store/order": {
      "post": {
        "tags": [
          "store"
        ],
        "summary": "Place an order for a pet",
        "description": "",
        "operationId": "placeOrder",
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "order placed for purchasing the pet",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Order"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Order"
            }
          },
          "400": {
            "description": "Invalid Order"
          }
        }
      }
    },
    "/store/order/{orderId}": {
      "get": {
        "tags": [
          "store"
        ],
        "summary": "Find purchase order by ID",
        "description": "For valid response try integer IDs with value >= 1 and <= 10. Other values will generated exceptions",
        "operationId": "getOrderById",
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "orderId",
            "in": "path",
            "description": "ID of pet that needs to be fetched",
            "required": true,
            "type": "integer",
            "maximum": 10,
            "minimum": 1,
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Order"
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Order not found"
          }
        }
      },
      "delete": {
        "tags": [
          "store"
        ],
        "summary": "Delete purchase order by ID",
        "description": "For valid response try integer IDs with positive integer value. Negative or non-integer values will generate API errors",
        "operationId": "deleteOrder",
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "orderId",
            "in": "path",
            "description": "ID of the order that needs to be deleted",
            "required": true,
            "type": "integer",
            "minimum": 1,
            "format": "int64"
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Order not found"
          }
        }
      }
    },
    "/user": {
      "post": {
        "tags": [
          "user"
        ],
        "summary": "Create user",
        "description": "This can only be done by the logged in user.",
        "operationId": "createUser",
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Created user object",
            "required": true,
            "schema": {
              "$ref": "#/definitions/User"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        }
      }
    },
    "/user/createWithArray": {
      "post": {
        "tags": [
          "user"
        ],
        "summary": "Creates list of users with given input array",
        "description": "",
        "operationId": "createUsersWithArrayInput",
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "List of user object",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/User"
              }
            }
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        }
      }
    },
    "/user/createWithList": {
      "post": {
        "tags": [
          "user"
        ],
        "summary": "Creates list of users with given input array",
        "description": "",
        "operationId": "createUsersWithListInput",
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "List of user object",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/User"
              }
            }
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        }
      }
    },
    "/user/login": {
      "get": {
        "tags": [
          "user"
        ],
        "summary": "Logs user into the system",
        "description": "",
        "operationId": "loginUser",
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "username",
            "in": "query",
            "description": "The user name for login",
            "required": true,
            "type": "string"
          },
          {
            "name": "password",
            "in": "query",
            "description": "The password for login in clear text",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "string"
            },
            "headers": {
              "X-Rate-Limit": {
                "type": "integer",
                "format": "int32",
                "description": "calls per hour allowed by the user"
              },
              "X-Expires-After": {
                "type": "string",
                "format": "date-time",
                "description": "date in UTC when token expires"
              }
            }
          },
          "400": {
            "description": "Invalid username/password supplied"
          }
        }
      }
    },
    "/user/logout": {
      "get": {
        "tags": [
          "user"
        ],
        "summary": "Logs out current logged in user session",
        "description": "",
        "operationId": "logoutUser",
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        }
      }
    },
    "/user/{username}": {
      "get": {
        "tags": [
          "user"
        ],
        "summary": "Get user by user name",
        "description": "",
        "operationId": "getUserByName",
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "username",
            "in": "path",
            "description": "The name that needs to be fetched. Use user1 for testing. ",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/User"
            }
          },
          "400": {
            "description": "Invalid username supplied"
          },
          "404": {
            "description": "User not found"
          }
        }
      },
      "put": {
        "tags": [
          "user"
        ],
        "summary": "Updated user",
        "description": "This can only be done by the logged in user.",
        "operationId": "updateUser",
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "username",
            "in": "path",
            "description": "name that need to be updated",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Updated user object",
            "required": true,
            "schema": {
              "$ref": "#/definitions/User"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid user supplied"
          },
          "404": {
            "description": "User not found"
          }
        }
      },
      "delete": {
        "tags": [
          "user"
        ],
        "summary": "Delete user",
        "description": "This can only be done by the logged in user.",
        "operationId": "deleteUser",
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "username",
            "in": "path",
            "description": "The name that needs to be deleted",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid username supplied"
          },
          "404": {
            "description": "User not found"
          }
        }
      }
    }
  },
  "securityDefinitions": {
    "petstore_auth": {
      "type": "oauth2",
      "authorizationUrl": "http://petstore.swagger.io/oauth/dialog",
      "flow": "implicit",
      "scopes": {
        "write:pets": "modify pets in your account",
        "read:pets": "read your pets"
      }
    },
    "api_key": {
      "type": "apiKey",
      "name": "api_key",
      "in": "header"
    }
  },
  "definitions": {
    "Order": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "petId": {
          "type": "integer",
          "format": "int64"
        },
        "quantity": {
          "type": "integer",
          "format": "int32"
        },
        "shipDate": {
          "type": "string",
          "format": "date-time"
        },
        "status": {
          "type": "string",
          "description": "Order Status",
          "enum": [
            "placed",
            "approved",
            "delivered"
          ]
        },
        "complete": {
          "type": "boolean",
          "default": false
        }
      },
      "xml": {
        "name": "Order"
      }
    },
    "User": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "username": {
          "type": "string"
        },
        "firstName": {
          "type": "string"
        },
        "lastName": {
          "type": "string"
        },
        "email": {
          "type": "string"
        },
        "password": {
          "type": "string"
        },
        "phone": {
          "type": "string"
        },
        "userStatus": {
          "type": "integer",
          "format": "int32",
          "description": "User Status"
        }
      },
      "xml": {
        "name": "User"
      }
    },
    "MarketPrice": {
      "type": "number",
      "format": "double"
    }
  },
  "externalDocs": {
    "description": "Find out more about Swagger",
    "url": "http://swagger.io"
  }
}
